Updated 6/01/99 for UIS dbgen v2.0.

The CUCS MAILING-LIST GENERATOR
	Mauricio A. Hernandez
	Please read the Copyright notice in COPYRIGHT

See the other README file for details on how to run dbgen.  This README
file documents how version 2.0 of dbgen works.  


Main difference:
----------------

The main difference between v2.0 and v1.0 is how the number of records 
and the distribution of duplicates is controlled.  dbgen v2.0 uses only
two parameters to control the size and distribution of the output:

	+ n = The (approximate) number of records to be generated.
	+ c = The number of clusters (i.e., persons in the data) to be
	  distributed among the n records.

The user can select three distributions:

	+ uniform (default):  c clusters will be formed.  The AVERAGE
	  number of records per cluster will be n/c.
	+ Poisson: The n records are distributed in c clusters using
	  a Poisson distribution where n/c is the mean.
	+ zipf: The n records are distributed in c clusters using
	  a zipf distribution.  The user must provide the zipf 
	  parameter "theta" (0 <= theta <= 1).  theta=1 should
	  give you an uniform distribution.  As you make theta smaller,
	  the "skewness" of the distribution will increase (i.e., you
	  will start getting a small number of clusters that contain
	  a large number of duplicates and a large number of clusters
	  with only 1 or 2 records).


Other differences:
------------------

The program runs 'gunzip' to decompress the names (mnames.gz) and zipcodes 
(zipcodes.gz) files.  DO NOT decompress these files yourself.  'gunzip'
should be somewhere in your PATH.

See also the section on post-processing the output.



Examples:
---------

Try the following examples to get an idea of what the program produces
under different distributions:

    $ dbgen -n 100 -c 10 -q -i -o output.db 
    ------------------------------------------------------
     10 clusters generated containing a total of 107 records.
     Random seed : 10648
    ------------------------------------------------------

You should be able to quickly identify the 10 clusters in 'output.db'
using the CLUSTER_ID (the first field of each records).  Notice that 
n, the number of records, is used to figure out the average size of
each cluster.  It does not mean the _exact_ number of records to be
generated!


    $ dbgen -poisson -n 100 -c 10 -q -i -o output.db
    ------------------------------------------------------
     10 clusters generated containing a total of 64 records.
     Random seed : 10864
    ------------------------------------------------------

(I am not sure if this one is working fine, but an inspection of the size
of the resulting clusters seem to be following a poisson distribution).


    $ dbgen -z 0.25 -n 100 -c 10 -q -i -o output.db
    ------------------------------------------------------
     10 clusters generated containing a total of 104 records.
     Random seed : 11003
    ------------------------------------------------------

Notice the large initial cluster in output.db and how the size of the
following clusters is smaller.



Post-processing the generated list:
-----------------------------------

A "problem" with the output generated by dbgen v2.0 is that clusters
appear one after the other and that the record ID (the second field) may
not be unique!  A simple solution is to replace all the record IDs in 
the output file with an increasing number.  This, however, will still 
keep the clusters one after another and, further, records representing
the same individual appear sequential - this introduces a bias that we
do not want when testing Merge/Purge programs.  

The 'postdbgen.sh' shell script will reorder the records in the output
file using the generated 'record ID' and then will replace the record ID
with a sequential number.  Since the 'record ID' generated by dbgen is
almost random (and, thus, this is why there it is not necessarily unique),
the result will be a list in which the records generated by dbgen will
appear in random order and with a unique ID.  Here is how I frequently
prepare a data set:


    $ dbgen -z 0.25 -n 100 -c 10 -q -i -o output.db
    ------------------------------------------------------
     10 clusters generated containing a total of 104 records.
     Random seed : 11003
    ------------------------------------------------------
    $ postdbgen.sh output.db > input.db
    $ 

 input.db will then be the input to my Merge/Purge system.



Mauricio


